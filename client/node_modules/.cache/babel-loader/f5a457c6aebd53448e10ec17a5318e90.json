{"ast":null,"code":"// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const Login = ({ setToken }) => {\n// \tconst [email, setEmail] = useState(\"\");\n// \tconst [password, setPassword] = useState(\"\");\n// \tconst [message, setMessage] = useState(\"\");\n// \tconst navigate = useNavigate();\n\n// \tconst handleLogin = async (e) => {\n// \t\te.preventDefault();\n// \t\ttry {\n// \t\t\tconst response = await axios.post(\"http://localhost:5500/api/login\", {\n// \t\t\t\temail,\n// \t\t\t\tpassword,\n// \t\t\t});\n// \t\t\tconst token = response.data.token;\n// \t\t\tsetToken(token);\n// \t\t\tlocalStorage.setItem(\"token\", token);\n// \t\t\tnavigate(\"/home\"); // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ Ïãú ÌôàÏúºÎ°ú Ïù¥Îèô\n// \t\t} catch (error) {\n// \t\t\tsetMessage(error.response?.data.message || \"Login failed\");\n// \t\t}\n// \t};\n\n// \treturn (\n// \t\t<div>\n// \t\t\t<h2>ü©µ Loginü©µ </h2>\n// \t\t\t<form onSubmit={handleLogin}>\n// \t\t\t\t<input\n// \t\t\t\t\ttype=\"email\"\n// \t\t\t\t\tplaceholder=\"example@gmail.com\"\n// \t\t\t\t\tvalue={email}\n// \t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\n// \t\t\t\t/>\n// \t\t\t\t<input\n// \t\t\t\t\ttype=\"password\"\n// \t\t\t\t\tplaceholder=\"password\"\n// \t\t\t\t\tvalue={password}\n// \t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n// \t\t\t\t/>\n// \t\t\t\t<button type=\"submit\">Login</button>\n// \t\t\t</form>\n// \t\t\t{message && <p>{message}</p>}\n// \t\t</div>\n// \t);\n// };\n\n// export default Login;\n\nconst bcrypt = require(\"bcrypt\");\nconst jwt = require(\"jsonwebtoken\");\nconst User = require(\"./models/User\"); // Adjust according to your file structure\n\n// Login route\napp.post(\"/api/login\", async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  try {\n    // Debugging: Log the email and password received\n    console.log(\"Received email:\", email);\n    console.log(\"Received password:\", password);\n    const user = await User.findOne({\n      email\n    });\n    if (!user) {\n      return res.status(400).json({\n        message: \"Ïù¥Î©îÏùº ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏûòÎ™ªÎêòÏóàÏäµÎãàÎã§.\"\n      });\n    }\n\n    // Debugging: Log the stored password hash\n    console.log(\"Stored password hash:\", user.password);\n\n    // Compare the hashed password with the entered password\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(400).json({\n        message: \"Ïù¥Î©îÏùº ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏûòÎ™ªÎêòÏóàÏäµÎãàÎã§.\"\n      });\n    }\n\n    // Generate JWT token\n    const token = jwt.sign({\n      userId: user._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: \"1h\"\n    });\n    console.log(\"Generated token:\", token);\n    res.status(200).json({\n      token,\n      message: \"Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ\"\n    });\n  } catch (error) {\n    console.error(\"Error during login:\", error);\n    res.status(500).json({\n      message: \"ÏÑúÎ≤Ñ Ïò§Î•ò\"\n    });\n  }\n});","map":{"version":3,"names":["bcrypt","require","jwt","User","app","post","req","res","email","password","body","console","log","user","findOne","status","json","message","isMatch","compare","token","sign","userId","_id","process","env","JWT_SECRET","expiresIn","error"],"sources":["/Users/YoojeongTak/RealMernStack/client/src/components/Login.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const Login = ({ setToken }) => {\n// \tconst [email, setEmail] = useState(\"\");\n// \tconst [password, setPassword] = useState(\"\");\n// \tconst [message, setMessage] = useState(\"\");\n// \tconst navigate = useNavigate();\n\n// \tconst handleLogin = async (e) => {\n// \t\te.preventDefault();\n// \t\ttry {\n// \t\t\tconst response = await axios.post(\"http://localhost:5500/api/login\", {\n// \t\t\t\temail,\n// \t\t\t\tpassword,\n// \t\t\t});\n// \t\t\tconst token = response.data.token;\n// \t\t\tsetToken(token);\n// \t\t\tlocalStorage.setItem(\"token\", token);\n// \t\t\tnavigate(\"/home\"); // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ Ïãú ÌôàÏúºÎ°ú Ïù¥Îèô\n// \t\t} catch (error) {\n// \t\t\tsetMessage(error.response?.data.message || \"Login failed\");\n// \t\t}\n// \t};\n\n// \treturn (\n// \t\t<div>\n// \t\t\t<h2>ü©µ Loginü©µ </h2>\n// \t\t\t<form onSubmit={handleLogin}>\n// \t\t\t\t<input\n// \t\t\t\t\ttype=\"email\"\n// \t\t\t\t\tplaceholder=\"example@gmail.com\"\n// \t\t\t\t\tvalue={email}\n// \t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\n// \t\t\t\t/>\n// \t\t\t\t<input\n// \t\t\t\t\ttype=\"password\"\n// \t\t\t\t\tplaceholder=\"password\"\n// \t\t\t\t\tvalue={password}\n// \t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n// \t\t\t\t/>\n// \t\t\t\t<button type=\"submit\">Login</button>\n// \t\t\t</form>\n// \t\t\t{message && <p>{message}</p>}\n// \t\t</div>\n// \t);\n// };\n\n// export default Login;\n\nconst bcrypt = require(\"bcrypt\");\nconst jwt = require(\"jsonwebtoken\");\nconst User = require(\"./models/User\"); // Adjust according to your file structure\n\n// Login route\napp.post(\"/api/login\", async (req, res) => {\n\tconst { email, password } = req.body;\n\n\ttry {\n\t\t// Debugging: Log the email and password received\n\t\tconsole.log(\"Received email:\", email);\n\t\tconsole.log(\"Received password:\", password);\n\n\t\tconst user = await User.findOne({ email });\n\t\tif (!user) {\n\t\t\treturn res\n\t\t\t\t.status(400)\n\t\t\t\t.json({ message: \"Ïù¥Î©îÏùº ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏûòÎ™ªÎêòÏóàÏäµÎãàÎã§.\" });\n\t\t}\n\n\t\t// Debugging: Log the stored password hash\n\t\tconsole.log(\"Stored password hash:\", user.password);\n\n\t\t// Compare the hashed password with the entered password\n\t\tconst isMatch = await bcrypt.compare(password, user.password);\n\t\tif (!isMatch) {\n\t\t\treturn res\n\t\t\t\t.status(400)\n\t\t\t\t.json({ message: \"Ïù¥Î©îÏùº ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏûòÎ™ªÎêòÏóàÏäµÎãàÎã§.\" });\n\t\t}\n\n\t\t// Generate JWT token\n\t\tconst token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {\n\t\t\texpiresIn: \"1h\",\n\t\t});\n\t\tconsole.log(\"Generated token:\", token);\n\n\t\tres.status(200).json({ token, message: \"Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ\" });\n\t} catch (error) {\n\t\tconsole.error(\"Error during login:\", error);\n\t\tres.status(500).json({ message: \"ÏÑúÎ≤Ñ Ïò§Î•ò\" });\n\t}\n});\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMC,GAAG,GAAGD,OAAO,CAAC,cAAc,CAAC;AACnC,MAAME,IAAI,GAAGF,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;;AAEvC;AACAG,GAAG,CAACC,IAAI,CAAC,YAAY,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC1C,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGH,GAAG,CAACI,IAAI;EAEpC,IAAI;IACH;IACAC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEJ,KAAK,CAAC;IACrCG,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEH,QAAQ,CAAC;IAE3C,MAAMI,IAAI,GAAG,MAAMV,IAAI,CAACW,OAAO,CAAC;MAAEN;IAAM,CAAC,CAAC;IAC1C,IAAI,CAACK,IAAI,EAAE;MACV,OAAON,GAAG,CACRQ,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAwB,CAAC,CAAC;IAC7C;;IAEA;IACAN,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEC,IAAI,CAACJ,QAAQ,CAAC;;IAEnD;IACA,MAAMS,OAAO,GAAG,MAAMlB,MAAM,CAACmB,OAAO,CAACV,QAAQ,EAAEI,IAAI,CAACJ,QAAQ,CAAC;IAC7D,IAAI,CAACS,OAAO,EAAE;MACb,OAAOX,GAAG,CACRQ,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAwB,CAAC,CAAC;IAC7C;;IAEA;IACA,MAAMG,KAAK,GAAGlB,GAAG,CAACmB,IAAI,CAAC;MAAEC,MAAM,EAAET,IAAI,CAACU;IAAI,CAAC,EAAEC,OAAO,CAACC,GAAG,CAACC,UAAU,EAAE;MACpEC,SAAS,EAAE;IACZ,CAAC,CAAC;IACFhB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEQ,KAAK,CAAC;IAEtCb,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEI,KAAK;MAAEH,OAAO,EAAE;IAAS,CAAC,CAAC;EACnD,CAAC,CAAC,OAAOW,KAAK,EAAE;IACfjB,OAAO,CAACiB,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3CrB,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAQ,CAAC,CAAC;EAC3C;AACD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}